В един клас имаме:
1. Дефениция на класа
2. Полета
3. Конструктор
4. Пропъртита с гетъри и сетъри
Конструкторът е специален метод, инструмент с който дефинираме(инициализираме) нов клас!!! Метод който служи за инициализация на данните в един клас.
Целта му е да зададе ВАЛИДНО начално състояние на този клас (да зададе отделните полета със смислени данни).
Полето пази данни, а пропертито е действие, служат за достъп до данните. Get е за да го достъпваш, а Set е за да го променяш.
Полетата могат да бъдат статични и нестатични.
Ако полето е статично (всички сгради имат еднакъв адрес).
Конструкторът е метод който създава обекти!!!
Конструкторът го викам в main method с new Student();

public class Cat : Animal { // Animal е базов клас който се наследява.
   private string name; // поле (винаги трябва да е private!!!)
   private string owner; // поле
    
   public Cat(string name, string owner) // конструктор
   {
      this.Name = name; 
      this.Owner = owner; 
   }

   public string Name // проперти
   { 
      get { return this.name; }
      set { this.name = value; }
   }

   public string Owner // проперти
   {
      get { return this.owner; }
      set { this.owner = value; }
   }
   
   public void SayMiau() // този метод не е static защото е различен за всеки един обект (би могъл да има различно поведение)
   {
      Console.WriteLine("Miauuuuuuu!");
   }
} 

public const float PI = 3.14159;
public readonly Color = Color.FromRGBA(25, 33, 74, 128);
......................................................................................................................
Exceptions (try catch blocks)

CallStack - Стека е онова парче от паметта което се заделя за всяка наша програма, което пази в себе си, всички методи,
които са извикани до текущият момент. За всеки един метод пази информация за неговите локални проментливи.
................................................................................................................................
Наследяване и абстракция 

Абстракцията означава да дефинираме и използваме само тези неща от един модел който ни трябват.
Interface е поведение!!!
Служебно винаги се наследява класа Object!!!

Polymorphism - възможността да работим с обекти от даден клас през базов interface и да викаме някакви абстрактни действия
които класовете наследници споделят. Възможността един обект да има няколко форми.
Жабата е едновременно жаба, но и животно. Тоест тя има много форми(polymorphism).

Абстрактните методи са задължителни за подмяна от наследника. Те се имплементират от наследниците.
Виртуалните методи са разрешени за подмяна. Може да се подменят по желание, не е задължително.
Интерфейсните методи са задължителни за подмяна или имплементация.

Възможността да подменяме поведението в класа наследник от родителският клас.

Figure f1 = new Square(...);
Figure f2 = new Circle(...);
Това е благодарение на полиморфизма. Винаги в базов клас може да запишем клас наследник.

Interface дефинира само действия, докато abstract class дефинира програмна логика.

Отделните групи действия да се отделят в отделни interface-и.

public decimal? Price { get; set; } - Ябълка без цена!!! ? дава стойност null!!!

base.ToString() - Използва се при override на parent метод в child метод!!!

Абстрактният клас е полу-имлементиран клас.
..........................................................................................................................
Cohesion - Свързаност на отговорности. Метода е тип cohesion (изпълнява точно определено нещо).
Принцип при който едно нещо изпълнява точно определено (поведение или функция).
Пример за strong Cohesion e класа Math. Всички методи в този клас са свързани с математически функции, а не с нещо извън математиката.

Coupling е взаймовръзка между два обекта(класа). Не оплитайте два класа, нека те да имат минимална свързаност, минимална взаймовръзка между обектите.

Капсулация - да предпазим класа валиден.

Статичните и абстрактните класове не се инстанцират, те нямат конструктори!!!

var circles = figures
                    .Where(figures => figures is Circle)
                    .Cast<Circle>;
..........................................................................................................................
Други типове 
Енумерации
string coffeeSize = "Normal";
CoffeeSize coffeeSizeEnum = (CoffeeSize) Enum.Parse(typeof(CoffeeSize), coffeeSize);

..........................................................................................................................
Делегати и Events

Делегатът е обект който държи в себе си референция към някой метод или няколко метода които да се извикват един след друг и е силно типизиран.
Оказател към друг метод в паметта.

d += delegate(string str)
{
	Console.WriteLine("Uppercase: {0}", str.ToUpper());
	return 1;
}; - Това е пример за анонимен метод (функция).

Евентите за разлика от делегатите могат да бъдат членове на интерфейси!!!
Евентите могат да бъдат извиквани само вътре в класа в който са дефинирани.
..........................................................................................................................
Обща система от типове

CLR - е тази програма която хваща нашият код и го компилира до инструкции за процесора 
(междинният MSIL(Microsoft Intermediate Language) код се до компилира до инструкции за процесора) 
така нареченото exe или dll!!! Dll пази класове които се използват от exe. Като стартирам exe почва run time
да се компилира до инструкции към процесора от тъй нареченият JIT(Just in time compilation) компилатор.
Base Class Library - Там е дефиниран String класа. Кой ASCII символ на какви байтове отговаря.
Там е дефиниран System.Thread класа. Изобщо всички най-базови калсове.
Дата слоя се грижи да работим с някакви данни.
Над тези базови библиотеки стъпват технологиите. Например ASP.NET, Windows Forms и т.н
Най-отгоре на тази пирамида стоят езиците с които работим. Например С#.
Common Type System дефинира какви типове се поддържат. Например string, dynamic, int32 и т.н
..........................................................................................................................
Подготовка за изпит
За нов ред трябва да ползвам Environment.NewLine !!!














